# This workflow enables PR comment-based command execution for maintainers. Commands are parsed by
# scripts/marinbot.js which validates users against marinbot.json maintainer list.
#
# USAGE
#
# @marinbot ray_run [ray_run_args] --cluster <path> <module> - Submits and runs a Ray job on the specified cluster
# @marinbot stop --cluster <path> <job_id> - Stops a specific Ray job (requires manual job ID from logs)
#
# TODO
# Post failure message if there's an internal error?

name: marinbot

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  # If pull-requests: read, we get a 403 when trying to write to PR comments.
  pull-requests: write
  issues: write
  actions: write
  id-token: write

jobs:
  marinbot:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '@marinbot')

    defaults:
      run:
        working-directory: ./marin

    steps:
      # Checkout from main; this action only runs on main, so using
      # marinbot.json from main should keep people from giving themselves
      # permission in a branch.
      - name: Sparse checkout marinbot scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/marinbot.js
            marinbot.json
          sparse-checkout-cone-mode: false
          path: marinbot

      - name: Parse command and validate
        id: meta
        uses: actions/github-script@v7
        with:
          script: |
            const marinbot = require('../marinbot/scripts/marinbot.js');
            try {
              await marinbot.handle({github, context, core});
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Post starting comment for ray_run
        if: steps.meta.outputs.command == 'ray_run'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(${{ steps.meta.outputs.pr_number }}),
              body: `üöÄ Starting: \`${{ steps.meta.outputs.full_command }}\``
            });

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.meta.outputs.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip and uv
        if: steps.meta.outputs.command == 'ray_run'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
          key: ${{ runner.os }}-3.11-marinbot-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-3.11-marinbot-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'ray[default]'
          tree -L 3 /home/runner/work
          if [[ "${{ steps.meta.outputs.command }}" == "ray_run" ]]; then
            pip install uv
            uv pip install --system -e . --torch-backend=cpu
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Start Ray dashboard
        run: |
          set -e
          echo "Starting ray dashboard for ${{ steps.meta.outputs.cluster_path }}"
          ray dashboard '${{ steps.meta.outputs.cluster_path }}' &
          echo $! > dashboard.pid
          echo "Waiting for Ray dashboard to become available..."
          for i in $(seq 1 120); do
            if curl -sSf http://127.0.0.1:8265 >/dev/null 2>&1; then
              echo "Dashboard is up"; break;
            fi
            sleep 2
          done

      - name: Stop Ray job
        if: steps.meta.outputs.command == 'stop'
        run: |
          set -e
          export RAY_ADDRESS="http://127.0.0.1:8265"
          job_id="${{ steps.meta.outputs.job_id }}"
          echo "Stopping Ray job: $job_id"
          if ray job stop "$job_id"; then
            echo "Successfully stopped job $job_id"
          else
            echo "Warning: Failed to stop job $job_id (it may have already completed or does not exist)"
            # Don't fail the workflow, but log the warning
          fi

      - name: Execute ray_run
        if: steps.meta.outputs.command == 'ray_run'
        id: execute
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
          PYTHONPATH: .:src:experiments
        run: |
          set -e
          # Generate a unique submission ID based on PR number and workflow run number
          SUBMISSION_ID="pr${{ steps.meta.outputs.pr_number }}-run${{ github.run_number }}-${{ github.run_attempt }}"
          echo "submission_id=$SUBMISSION_ID" >> $GITHUB_OUTPUT

          echo "Executing: python -m marin.run.ray_run --no_wait --submission-id $SUBMISSION_ID ${{ steps.meta.outputs.ray_args }} -- python -m ${{ steps.meta.outputs.module }} --force_run_failed True"
          # Run with --no_wait and custom submission ID
          python -m marin.run.ray_run --no_wait --submission-id "$SUBMISSION_ID" ${{ steps.meta.outputs.ray_args }} \
            -e WANDB_API_KEY "${WANDB_API_KEY}" \
            -- python -m ${{ steps.meta.outputs.module }} --force_run_failed True 2>&1 | tee ray_output.log

          echo "Submitted Ray job with ID: $SUBMISSION_ID"

      - name: Stop Ray dashboard
        if: always()
        run: |
          if [ -f dashboard.pid ]; then kill $(cat dashboard.pid) || true; fi

      - name: Comment stop acknowledgement
        if: steps.meta.outputs.command == 'stop' && success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(${{ steps.meta.outputs.pr_number }}),
              body: 'üõë Stopped Ray job: `${{ steps.meta.outputs.job_id }}`'
            });

      - name: Post ray_run success comment
        if: steps.meta.outputs.command == 'ray_run' && success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(${{ steps.meta.outputs.pr_number }}),
              body: `‚úÖ Submitted: \`${{ steps.meta.outputs.full_command }}\`\n\nJob ID: \`${{ steps.execute.outputs.submission_id }}\`\n\nTo stop: \`@marinbot stop --cluster ${{ steps.meta.outputs.cluster_path }} ${{ steps.execute.outputs.submission_id }}\``
            });

      - name: Post ray_run failure comment
        if: steps.meta.outputs.command == 'ray_run' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(${{ steps.meta.outputs.pr_number }}),
              body: `‚ùå Failed: \`${{ steps.meta.outputs.full_command }}\`\n\n[View logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });
